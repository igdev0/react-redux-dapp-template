import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { RootState } from "@core/store"

/**
 * Payload used for generating an access token.
 *
 * @property sub - Subject (typically the user ID)
 * @property jti - Unique token identifier (used to track/revoke tokens)
 * @property wallet_address - The user's wallet address
 * @property exp - Optional expiration timestamp (added automatically by JWT library if not provided)
 */
export interface AccessTokenPayload {
  sub: string
  jti: string
  wallet_address: string
  exp: number
}

/**
 * Payload used for signing in with a wallet (e.g. Sign-In with Ethereum).
 *
 * @property wallet_address - The user's public wallet address
 * @property nonce - A unique value to prevent replay attacks (usually generated by the backend)
 * @property message - The original message that was signed by the user
 * @property signature - The cryptographic signature generated from signing the message
 */
export interface SignInPayload {
  wallet_address: string
  nonce: string
  message: string
  signature: string
}

export const API_URL = "http://localhost:3000"
const auth = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: API_URL,
    prepareHeaders(headers, { getState }) {
      const token = (getState() as RootState).authSlice.accessToken
      if (token) {
        headers.set("authorization", `Bearer ${token}`)
      }
      return headers
    },
    credentials: "include",
    mode: "cors",
  }),

  reducerPath: "authApi",

  endpoints(build) {
    return {
      refreshToken: build.query<
        {
          accessToken: string
          ttl: number
        },
        unknown,
        unknown
      >({
        query() {
          return {
            method: "GET",
            url: "auth/refresh",
            credentials: "include",
            mode: "cors",
          }
        },
      }),
    }
  },
})

export const { useRefreshTokenQuery } = auth
export default auth
